diff -Naurp CoreELEC-settings/src/defaults.py CoreELEC-settings-patch/src/defaults.py
--- CoreELEC-settings/src/defaults.py	2024-04-09 11:09:55.000000000 +0000
+++ CoreELEC-settings-patch/src/defaults.py	2024-04-15 14:34:31.000000000 +0000
@@ -91,6 +91,8 @@ updates = {
 
 about = {'ENABLED': True}
 
+tvserver = {'ENABLED': True}
+
 hardware = {
     'ENABLED': True,
     'KERNEL_CMD': '/proc/cmdline'
@@ -103,4 +105,5 @@ _services = {
     'crond': ['cron.service'],
     'iptables': ['iptables.service'],
     'tmate': ['tmate.service'],
+    'tvlink': ['tvlink.service'],
     }
diff -Naurp CoreELEC-settings/src/resources/lib/modules/services.py CoreELEC-settings-patch/src/resources/lib/modules/services.py
--- CoreELEC-settings/src/resources/lib/modules/services.py	2024-04-09 11:09:55.000000000 +0000
+++ CoreELEC-settings-patch/src/resources/lib/modules/services.py	2024-04-15 14:36:50.000000000 +0000
@@ -108,7 +108,7 @@ class services:
                         'samba_minprotocol': {
                             'order': 6,
                             'name': 32217,
-                            'value': 'SMB2',
+                            'value': 'SMB1',
                             'action': 'initialize_samba',
                             'type': 'multivalue',
                             'values': [
@@ -125,7 +125,7 @@ class services:
                         'samba_maxprotocol': {
                             'order': 7,
                             'name': 32218,
-                            'value': 'SMB3',
+                            'value': 'SMB1',
                             'action': 'initialize_samba',
                             'type': 'multivalue',
                             'values': [
@@ -724,7 +724,7 @@ class services:
             SSHchange = False
             newpwd = xbmcDialog.input(self.oe._(746))
             if newpwd:
-                if newpwd == "coreelec":
+                if newpwd == "mcpc":
                     self.oe.execute('cp -fp /usr/cache/shadow /storage/.cache/shadow')
                     readout3 = "Retype password"
                 else:
diff -Naurp CoreELEC-settings/src/resources/lib/modules/tvserver.py CoreELEC-settings-patch/src/resources/lib/modules/tvserver.py
--- CoreELEC-settings/src/resources/lib/modules/tvserver.py	1970-01-01 00:00:00.000000000 +0000
+++ CoreELEC-settings-patch/src/resources/lib/modules/tvserver.py	2024-04-15 15:01:36.000000000 +0000
@@ -0,0 +1,177 @@
+# SPDX-License-Identifier: GPL-2.0-or-later
+# Copyright (C) 2011-present AlexELEC (https://alexelec.tv)
+
+import os
+import xbmcgui
+
+xbmcDialog = xbmcgui.Dialog()
+
+class tvserver:
+
+    ENABLED = False
+
+    menu = {'91': {
+        'name': 43000,
+        'menuLoader': 'load_menu',
+        'listTyp': 'list',
+        'InfoText': 4300,
+        }}
+
+    def __init__(self, oeMain):
+        try:
+            oeMain.dbg_log('tvserver::__init__', 'enter_function', oeMain.LOGDEBUG)
+
+            self.struct = {
+                'tvlink': {
+                    'order': 1,
+                    'name': 42025,
+                    'not_supported': [],
+                    'settings': {
+                        'enable_tvlink': {
+                            'order': 1,
+                            'name': 42026,
+                            'value': '0',
+                            'action': 'initialize_tvlink',
+                            'type': 'bool',
+                            'InfoText': 4226,
+                        },
+                    },
+                },
+            }
+
+            self.oe = oeMain
+
+            oeMain.dbg_log('tvserver::__init__', 'exit_function', oeMain.LOGDEBUG)
+        except Exception as e:
+            self.oe.dbg_log('tvserver::__init__', 'ERROR: (%s)' % repr(e))
+
+    def start_service(self):
+        try:
+            self.oe.dbg_log('tvserver::start_service', 'enter_function', self.oe.LOGDEBUG)
+            self.load_values()
+            self.initialize_tvlink(service=1)
+            self.oe.dbg_log('tvserver::start_service', 'exit_function', self.oe.LOGDEBUG)
+        except Exception as e:
+            self.oe.dbg_log('tvserver::start_service', 'ERROR: (%s)' % repr(e))
+
+    def stop_service(self):
+        try:
+            self.oe.dbg_log('tvserver::stop_service', 'enter_function', self.oe.LOGDEBUG)
+            self.oe.dbg_log('tvserver::stop_service', 'exit_function', self.oe.LOGDEBUG)
+        except Exception as e:
+            self.oe.dbg_log('tvserver::stop_service', 'ERROR: (' + repr(e) + ')')
+
+    def do_init(self):
+        try:
+            self.oe.dbg_log('tvserver::do_init', 'exit_function', self.oe.LOGDEBUG)
+            self.load_values()
+            self.oe.dbg_log('tvserver::do_init', 'exit_function', self.oe.LOGDEBUG)
+        except Exception as e:
+            self.oe.dbg_log('tvserver::do_init', 'ERROR: (%s)' % repr(e))
+
+    def set_value(self, listItem):
+        try:
+            self.oe.dbg_log('tvserver::set_value', 'enter_function', self.oe.LOGDEBUG)
+            self.struct[listItem.getProperty('category')]['settings'][listItem.getProperty('entry')]['value'] = listItem.getProperty('value')
+            self.oe.dbg_log('tvserver::set_value', 'exit_function', self.oe.LOGDEBUG)
+        except Exception as e:
+            self.oe.dbg_log('tvserver::set_value', 'ERROR: (' + repr(e) + ')')
+
+    def load_menu(self, focusItem):
+        try:
+            self.oe.dbg_log('tvserver::load_menu', 'enter_function', self.oe.LOGDEBUG)
+            self.oe.winOeMain.build_menu(self.struct)
+            self.oe.dbg_log('tvserver::load_menu', 'exit_function', self.oe.LOGDEBUG)
+        except Exception as e:
+            self.oe.dbg_log('tvserver::load_menu', 'ERROR: (%s)' % repr(e))
+
+    def load_values(self):
+        try:
+            self.oe.dbg_log('tvserver::load_values', 'enter_function', self.oe.LOGDEBUG)
+
+            # TVLINK
+            self.struct['tvlink']['settings']['enable_tvlink']['value'] = self.oe.get_service_state('tvlink')
+
+            self.oe.dbg_log('tvserver::load_values', 'exit_function', self.oe.LOGDEBUG)
+        except Exception as e:
+            self.oe.dbg_log('tvserver::load_values', 'ERROR: (%s)' % repr(e))
+
+    def initialize_tvlink(self, **kwargs):
+        try:
+            self.oe.dbg_log('tvserver::initialize_tvlink', 'enter_function', self.oe.LOGDEBUG)
+            self.oe.set_busy(1)
+            if 'listItem' in kwargs:
+                self.set_value(kwargs['listItem'])
+            options = {}
+            state = 0
+            if self.struct['tvlink']['settings']['enable_tvlink']['value'] == '1':
+                if not os.path.exists('/storage/.config/tvlink/tvlink'):
+                    tvl_status = self.get_tvl_source()
+                    if tvl_status == 'OK':
+                        self.oe.notify(self.oe._(32363), 'Starting TVLINK...')
+                    else:
+                        self.struct['tvlink']['settings']['enable_tvlink']['value'] = '0'
+                        self.oe.set_busy(0)
+                        answer = xbmcDialog.ok('Install TVLINK',
+                            'Error: The program is not installed, try again.')
+                        return
+                state = 1
+            self.oe.set_service('tvlink', options, state)
+            self.oe.set_busy(0)
+            self.oe.dbg_log('tvserver::initialize_tvlink', 'exit_function', self.oe.LOGDEBUG)
+        except Exception as e:
+            self.oe.set_busy(0)
+            self.oe.dbg_log('tvserver::initialize_tvlink', 'ERROR: (%s)' % repr(e), self.oe.LOGDEBUG)
+
+    def get_tvl_source(self):
+        import tarfile
+        import platform
+        import requests
+        from urllib.parse import urlparse
+
+        arch_machine = platform.machine()
+    
+        if arch_machine == 'armv7l':
+            lst_url = 'https://github.com/AlexELEC/TVLINK-arm7/releases/latest'
+            dnl_url = 'https://github.com/AlexELEC/TVLINK-arm7/releases/download'
+        elif arch_machine == 'aarch64':
+            lst_url = 'https://github.com/AlexELEC/TVLINK-arm64/releases/latest'
+            dnl_url = 'https://github.com/AlexELEC/TVLINK-arm64/releases/download'
+        elif arch_machine == 'x86_64':
+            lst_url = 'https://github.com/AlexELEC/TVLINK-x86_64/releases/latest'
+            dnl_url = 'https://github.com/AlexELEC/TVLINK-x86_64/releases/download'
+        else:
+            return 'ERROR'
+
+        try:
+            r = requests.get(lst_url, allow_redirects=False)
+            last_ver_url = r.headers['Location']
+            last_ver_path = urlparse(last_ver_url).path
+            tmP, ver = os.path.split(last_ver_path)
+            last_dnl_url = f"{dnl_url}/{ver}/TVLINK-{ver}.tar.bz2"
+        except:
+            return 'ERROR'
+
+        root_dir = "/storage/.config/tvlink"
+        if not os.path.isdir(root_dir): os.makedirs(root_dir)
+
+        tvl_patch = f"{oe.TEMP}TVLINK-{ver}.tar.bz2"
+        downloaded = oe.download_file(last_dnl_url, tvl_patch)
+        if not downloaded: return 'ERROR'
+        oe.notify(oe._(32363), 'Install TVLINK...')
+
+        try:
+            with tarfile.open(tvl_patch, "r:bz2") as tar:
+                tar.extractall(root_dir)
+            os.remove(tvl_patch)
+        except:
+            return 'ERROR'
+
+        return 'OK'
+
+    def exit(self):
+        try:
+            self.oe.dbg_log('tvserver::exit', 'enter_function', self.oe.LOGDEBUG)
+            self.oe.dbg_log('tvserver::exit', 'exit_function', self.oe.LOGDEBUG)
+        except Exception as e:
+            self.oe.dbg_log('tvserver::exit', 'ERROR: (%s)' % repr(e), self.oe.LOGDEBUG)
