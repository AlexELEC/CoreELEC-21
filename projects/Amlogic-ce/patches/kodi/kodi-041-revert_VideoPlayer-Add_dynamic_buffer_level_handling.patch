diff -Naurp kodi/xbmc/cores/VideoPlayer/IVideoPlayer.h kodi-patch/xbmc/cores/VideoPlayer/IVideoPlayer.h
--- kodi/xbmc/cores/VideoPlayer/IVideoPlayer.h	2024-10-23 13:20:24.000000000 +0000
+++ kodi-patch/xbmc/cores/VideoPlayer/IVideoPlayer.h	2024-10-24 08:02:43.000000000 +0000
@@ -21,15 +21,6 @@
 #define VideoPlayer_RDS      5
 #define VideoPlayer_ID3 6
 
-#define SIZE_1K              (int)1024
-#define SIZE_1M              (int)(SIZE_1K * 1024)
-
-#define LvLVideoMAX          (int)(256 * SIZE_1M)
-#define LvLVideoMIN          (int)(32 * SIZE_1M)
-
-#define LvLAudioMAX          (int)(32 * SIZE_1M)
-#define LvLAudioMIN          (int)(4 * SIZE_1M)
-
 class CDVDMsg;
 class CDVDStreamInfo;
 class CProcessInfo;
@@ -106,9 +97,6 @@ public:
   virtual void SetSpeed(int iSpeed) = 0;
   virtual bool IsEOS() { return false; };
   virtual bool SupportsExtention() const = 0;
-  virtual int  GetDataLevel() const = 0;
-  virtual void SetMaxDataSize(int iMaxDataSize) {}
-  virtual int GetMaxDataSize() const = 0;
 };
 
 class CDVDAudioCodec;
@@ -136,8 +124,4 @@ public:
   virtual bool IsPassthrough() const = 0;
   virtual float GetDynamicRangeAmplification() const = 0;
   virtual bool IsEOS() { return false; }
-
-  virtual int  GetDataLevel() const = 0;
-  virtual void SetMaxDataSize(int iMaxDataSize) {}
-  virtual int GetMaxDataSize() const = 0;
 };
diff -Naurp kodi/xbmc/cores/VideoPlayer/VideoPlayer.cpp kodi-patch/xbmc/cores/VideoPlayer/VideoPlayer.cpp
--- kodi/xbmc/cores/VideoPlayer/VideoPlayer.cpp	2024-10-23 13:20:24.000000000 +0000
+++ kodi-patch/xbmc/cores/VideoPlayer/VideoPlayer.cpp	2024-10-24 08:04:15.000000000 +0000
@@ -1099,109 +1099,6 @@ bool CVideoPlayer::ReadPacket(DemuxPacke
   return false;
 }
 
-void CVideoPlayer::HandleDynamicBufferLevel()
-{
-  int lvlv = m_VideoPlayerVideo->GetDataLevel();
-  int lvla = m_VideoPlayerAudio->GetDataLevel();
-  int lvlvcmax = m_VideoPlayerVideo->GetMaxDataSize();
-  int lvlacmax = m_VideoPlayerAudio->GetMaxDataSize();
-  int lvlvcnew = lvlvcmax;
-  int lvlacnew = lvlacmax;
-
-  int lvldif = std::abs(lvlv - lvla);
-  bool lvlfull(std::max(lvlv, lvla) > 99);
-
-  int lvstep = 4 * SIZE_1M;
-  int lastep = 512 * SIZE_1K;
-
-  // one buffer is > 99% and difference between them is > 15%
-  // increase the full buffer to lift up the other
-  if (lvlfull && lvldif > 15 && lvlv > 0 && lvla > 0)
-  {
-    // video buffer is > 99%
-    if (lvlv > 99)
-    {
-      // video buffer still can be increased?
-      if (lvlvcmax + lvstep <= LvLVideoMAX)
-        lvlvcnew = lvlvcmax + lvstep;
-    }
-    // audio buffer is > 99%
-    else if (lvla > 99)
-    {
-      // audio buffer still can be increased?
-      if (lvlacmax + lastep <= LvLAudioMAX)
-        lvlacnew = lvlacmax + lastep;
-    }
-  }
-  // both buffer are > 99%
-  // increase both buffer
-  else if ((lvlv > 99) && (lvla > 99))
-  {
-    // video buffer still can be increased?
-    if (lvlvcmax + lvstep <= LvLVideoMAX)
-      lvlvcnew = lvlvcmax + lvstep;
-
-    // audio buffer still can be increased?
-    if (lvlacmax + lastep <= LvLAudioMAX)
-      lvlacnew = lvlacmax + lastep;
-  }
-  // both buffer are < 99% and difference is < 2%
-  // both buffer are < 99% and the level of both is < 85%
-  else if (!lvlfull && (lvldif < 2 || (100 - lvlv > 15 && 100 - lvla > 15)))
-  {
-    // left free level of video buffer > one level video step in %
-    if ((100 - lvlv) > (100 / lvlvcmax * lvstep))
-    {
-      // video buffer still can be decreased?
-      if (lvlvcmax - lvstep >= LvLVideoMIN)
-        lvlvcnew = lvlvcmax - lvstep;
-    }
-
-    // left free level of audio buffer > one level audio step in %
-    if ((100 - lvla) > (100 / lvlacmax * lastep))
-    {
-      // audio buffer still can be decreased?
-      if (lvlacmax - lastep >= LvLAudioMIN)
-        lvlacnew = lvlacmax - lastep;
-    }
-  }
-
-  // video buffer level is < 5% and current video buffer limit is > minimal video buffer level
-  if (lvlv < 5 && lvlvcmax > LvLVideoMIN)
-  {
-    if ((100 - lvlv) > (100 / lvlvcmax * lvstep))
-    {
-      if (lvlvcmax - lvstep >= LvLVideoMIN)
-        lvlvcnew = lvlvcmax - lvstep;
-    }
-  }
-
-  // audio buffer level is < 5% and current audio buffer limit is > minimal audio buffer level
-  if (lvla < 5 && lvlacmax > LvLAudioMIN)
-  {
-    if ((100 - lvla) > (100 / lvlacmax * lastep))
-    {
-      if (lvlacmax - lastep >= LvLAudioMIN)
-        lvlacnew = lvlacmax - lastep;
-    }
-  }
-
-  // apply new buffer level limits to message queues
-  if (lvlvcnew != lvlvcmax)
-  {
-    CLog::Log(LOGDEBUG, LOGAVTIMING, "CVideoPlayer::{} {} video buffer to: {:d}MB, level video/audio: {:d}%/{:d}%", __FUNCTION__,
-      (lvlvcnew > lvlvcmax) ? "increased" : "decreased", lvlvcnew / SIZE_1M, lvlv, lvla);
-    m_VideoPlayerVideo->SetMaxDataSize(lvlvcnew);
-  }
-
-  if (lvlacnew != lvlacmax)
-  {
-    CLog::Log(LOGDEBUG, LOGAVTIMING, "CVideoPlayer::{} {} audio buffer to: {:.01f}MB, level video/audio: {:d}%/{:d}%", __FUNCTION__,
-      (lvlacnew > lvlacmax) ? "increased" : "decreased", static_cast<double>(lvlacnew) / SIZE_1M, lvlv, lvla);
-    m_VideoPlayerAudio->SetMaxDataSize(lvlacnew);
-  }
-}
-
 bool CVideoPlayer::IsValidStream(const CCurrentStream& stream)
 {
   if(stream.id<0)
@@ -1522,8 +1419,6 @@ void CVideoPlayer::Process()
     // update player state
     UpdatePlayState(200);
 
-    HandleDynamicBufferLevel();
-
     // make sure we run subtitle process here
     m_VideoPlayerSubtitle->Process(m_clock.GetClock() + m_State.time_offset - m_VideoPlayerVideo->GetSubtitleDelay(), m_State.time_offset);
 
diff -Naurp kodi/xbmc/cores/VideoPlayer/VideoPlayer.h kodi-patch/xbmc/cores/VideoPlayer/VideoPlayer.h
--- kodi/xbmc/cores/VideoPlayer/VideoPlayer.h	2024-10-23 13:20:24.000000000 +0000
+++ kodi-patch/xbmc/cores/VideoPlayer/VideoPlayer.h	2024-10-24 08:04:43.000000000 +0000
@@ -454,7 +454,6 @@ protected:
   void SendPlayerMessage(std::shared_ptr<CDVDMsg> pMsg, unsigned int target);
 
   bool ReadPacket(DemuxPacket*& packet, CDemuxStream*& stream);
-  void HandleDynamicBufferLevel();
   bool IsValidStream(const CCurrentStream& stream);
   bool IsBetterStream(const CCurrentStream& current, CDemuxStream* stream);
   void CheckBetterStream(CCurrentStream& current, CDemuxStream* stream);
diff -Naurp kodi/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp kodi-patch/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp
--- kodi/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp	2024-10-23 13:20:24.000000000 +0000
+++ kodi-patch/xbmc/cores/VideoPlayer/VideoPlayerAudio.cpp	2024-10-24 08:08:38.000000000 +0000
@@ -61,8 +61,8 @@ CVideoPlayerAudio::CVideoPlayerAudio(CDV
   m_prevskipped = false;
   m_maxspeedadjust = 0.0;
 
-  // queue data size is dynamical changed by stream
-  m_messageQueue.SetMaxDataSize(LvLAudioMIN);
+  // 18 MB allows max bitrate of 18 Mbit/s (TrueHD max peak) during 8 seconds
+  m_messageQueue.SetMaxDataSize(18 * 1024 * 1024);
   m_messageQueue.SetMaxTimeSize(8.0);
   m_disconAdjustTimeMs = processInfo.GetMaxPassthroughOffSyncDuration();
 }
@@ -202,10 +202,8 @@ void CVideoPlayerAudio::OnStartup()
 void CVideoPlayerAudio::UpdatePlayerInfo()
 {
   std::ostringstream s;
-  s << "aq:"     << std::setw(2) << std::min(99,m_messageQueue.GetLevel()) << "% ("
-    << std::setw(2) << std::min(99,m_messageQueue.GetLevel(true)) << "%, "
-    << std::fixed << std::setprecision(1) << static_cast<double>(m_messageQueue.GetMaxDataSize()) / SIZE_1M << "MB)";
-  s << ", Kb/s:" << std::fixed << std::setprecision(2) << m_audioStats.GetBitrate() / SIZE_1K;
+  s << "aq:"     << std::setw(2) << std::min(99,m_messageQueue.GetLevel()) << "%";
+  s << ", Kb/s:" << std::fixed << std::setprecision(2) << m_audioStats.GetBitrate() / 1024.0;
   s << ", ac:"   << m_processInfo.GetAudioDecoderName().c_str();
   if (!m_info.passthrough)
     s << ", chan:" << m_processInfo.GetAudioChannels().c_str();
diff -Naurp kodi/xbmc/cores/VideoPlayer/VideoPlayerAudio.h kodi-patch/xbmc/cores/VideoPlayer/VideoPlayerAudio.h
--- kodi/xbmc/cores/VideoPlayer/VideoPlayerAudio.h	2024-10-23 13:20:24.000000000 +0000
+++ kodi-patch/xbmc/cores/VideoPlayer/VideoPlayerAudio.h	2024-10-24 08:09:46.000000000 +0000
@@ -65,10 +65,6 @@ public:
   bool IsStalled() const override { return m_stalled;  }
   bool IsPassthrough() const override;
 
-  int  GetDataLevel() const { return m_messageQueue.GetLevel(true); }
-  void SetMaxDataSize(int iMaxDataSize) { m_messageQueue.SetMaxDataSize(iMaxDataSize); }
-  int GetMaxDataSize() const { return m_messageQueue.GetMaxDataSize(); }
-
 protected:
 
   void OnStartup() override;
diff -Naurp kodi/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp kodi-patch/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp
--- kodi/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp	2024-10-23 13:20:24.000000000 +0000
+++ kodi-patch/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp	2024-10-24 08:13:05.000000000 +0000
@@ -70,8 +70,8 @@ CVideoPlayerVideo::CVideoPlayerVideo(CDV
   m_iDroppedRequest = 0;
   m_fForcedAspectRatio = 0;
 
-  // queue data size is dynamical changed by stream
-  m_messageQueue.SetMaxDataSize(LvLVideoMIN);
+  // 128 MB allows max bitrate of 128 Mbit/s (e.g. UHD Blu-Ray) during 8 seconds
+  m_messageQueue.SetMaxDataSize(128 * 1024 * 1024);
   m_messageQueue.SetMaxTimeSize(8.0);
 
   m_iDroppedFrames = 0;
@@ -1037,10 +1037,8 @@ std::string CVideoPlayerVideo::GetPlayer
   int width, height;
   m_processInfo.GetVideoDimensions(width, height);
   std::ostringstream s;
-  s << "vq:"   << std::setw(2) << std::min(99, m_messageQueue.GetLevel()) << "% ("
-    << std::setw(2) << std::min(99, m_messageQueue.GetLevel(true)) << "%, "
-    << std::setw(3) << m_messageQueue.GetMaxDataSize() / SIZE_1M << "MB)";
-  s << ", Mb/s:" << std::fixed << std::setprecision(2) << (double)GetVideoBitrate() / (double)SIZE_1M;
+  s << "vq:"   << std::setw(2) << std::min(99, m_processInfo.GetLevelVQ()) << "%";
+  s << ", Mb/s:" << std::fixed << std::setprecision(2) << (double)GetVideoBitrate() / (1024.0*1024.0);
   s << ", dc:"   << m_processInfo.GetVideoDecoderName().c_str();
   s << ", " << width << "x" << height << (m_processInfo.GetVideoInterlaced() ? "i" : "p") << " [" << std::setprecision(2) << m_processInfo.GetVideoDAR() << "]@" << std::fixed << std::setprecision(3) << m_processInfo.GetVideoFps() << ", deint:" << m_processInfo.GetVideoDeintMethod();
   s << ", drop:" << m_iDroppedFrames;
diff -Naurp kodi/xbmc/cores/VideoPlayer/VideoPlayerVideo.h kodi-patch/xbmc/cores/VideoPlayer/VideoPlayerVideo.h
--- kodi/xbmc/cores/VideoPlayer/VideoPlayerVideo.h	2024-10-23 13:20:24.000000000 +0000
+++ kodi-patch/xbmc/cores/VideoPlayer/VideoPlayerVideo.h	2024-10-24 08:10:34.000000000 +0000
@@ -74,10 +74,6 @@ public:
   void SetSpeed(int iSpeed) override;
   bool SupportsExtention() const override { return m_pVideoCodec && m_pVideoCodec->SupportsExtention(); }
 
-  int  GetDataLevel() const { return m_messageQueue.GetLevel(true); }
-  void SetMaxDataSize(int iMaxDataSize) { m_messageQueue.SetMaxDataSize(iMaxDataSize); }
-  int GetMaxDataSize() const { return m_messageQueue.GetMaxDataSize(); }
-
   // classes
   CDVDOverlayContainer* m_pOverlayContainer;
   CDVDClock* m_pClock;
